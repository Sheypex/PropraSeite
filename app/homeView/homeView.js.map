{
  "version": 3,
  "file": "homeView.js",
  "sourceRoot": "",
  "sources": [
    "homeView.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA;AAAA,MAAA,eAAA,EAAA,aAAA,EAAA,SAAA,EAAA,eAAA,EAAA,QAAA,EAAA,UAAA,EAAA,YAAA,EAAA,SAAA,EAAA,YAAA,EAAA;;EAEA,OAAO,CAAC,MAAR,CAAe,gBAAf,EAAiC,CAAC,SAAD,CAAjC,CACE,CAAC,MADH,CACU;IAAC,gBAAD;IAAmB,QAAA,CAAC,cAAD,CAAA;aACzB,cAAc,CAAC,IAAf,CAAoB,GAApB;IAAyB;QACvB,WAAA,EAAa,wBADU;QAEvB,UAAA,EAAY;MAFW,CAAzB;IADyB,CAAnB;GADV,CAOE,CAAC,UAPH,CAOc,WAPd,EAO2B;IAAC,QAAD;IAAW,WAAX;IAAwB,QAAA,CAAC,KAAD;IAAQ,QAAR,CAAA;MAC/C,KAAK,CAAC,MAAN,GAAe,CAAC,OAAD;IAAU,aAAV;IAAyB,UAAzB;MACf,KAAK,CAAC,KAAN,GAAc,KAAK,CAAC,MAAO,CAAA,CAAA;MAC3B,KAAK,CAAC,QAAN,GAAiB;MACjB,KAAK,CAAC,WAAN,GAAoB;MACpB,KAAK,CAAC,WAAN,GAAoB;MACpB,KAAK,CAAC,aAAN,GAAsB;MACtB,KAAK,CAAC,OAAN,GAAgB;MAChB,KAAK,CAAC,WAAN,GAAoB,QAAA,CAAC,KAAD,CAAA;QAClB,KAAK,CAAC,KAAN,GAAc;eACd,SAAA,CAAU,KAAV;IAAiB,QAAjB;IAA2B,KAAK,CAAC,KAAjC;MAFkB;;MAIpB,KAAK,CAAC,SAAN,GAAkB;MAClB,KAAK,CAAC,SAAN,GAAkB,QAAA,CAAA,CAAA;eAChB,SAAA,CAAU,KAAK,CAAC,KAAhB;IAAuB,KAAK,CAAC,SAA7B;MADgB;;MAGlB,KAAK,CAAC,UAAN,GAAmB;MACnB,KAAK,CAAC,UAAN,GAAmB,QAAA,CAAA,CAAA;QACjB,KAAK,CAAC,KAAN,GAAc,KAAK,CAAC;eACpB,UAAA,CAAW,KAAX;IAAkB,QAAlB;IAA4B,KAAK,CAAC,UAAlC;MAFiB;;aAInB,SAAA,CAAU,KAAV;IAAiB,QAAjB;IAA2B,KAAK,CAAC,KAAjC;IArB+C,CAAxB;GAP3B,CA8BE,CAAC,SA9BH,CA8Ba,YA9Bb,EA8B2B,QAAA,CAAA,CAAA;WACvB;MACE,QAAA,EAAU,GADZ;MAEE,KAAA,EAAO;QACL,IAAA,EAAK;MADA,CAFT;MAKE,WAAA,EAAa;IALf;EADuB,CA9B3B;;EAwCA,UAAA,GAAa,MAAA,QAAA,CAAC,KAAD,EAAQ,QAAR,EAAkB,KAAlB,CAAA;AACX,QAAA;IAAA,MAAA,GAAS,CAAA,MAAM,SAAA,CAAU,KAAV,EAAiB,QAAjB,EAA2B,KAA3B,EAAkC,OAAlC,CAAN;IACT,QAAQ,CAAC,MAAT,CAAgB,KAAK,CAAC,SAAtB;IACA,IAAG,MAAA,KAAY,CAAC,CAAhB;aACE,KAAK,CAAC,SAAN,GAAkB,QAAA,CAAS,CAAC,QAAA,CAAA,CAAA;QAC1B,OAAO,CAAC,GAAR,CAAY,iBAAZ;eACA,iBAAA,CAAkB,KAAlB,EAAyB,KAAzB;MAF0B,CAAD,CAAT,EAGhB,IAHgB,EADpB;;EAHW;;EASb,SAAA,GAAY,QAAA,CAAC,KAAD,EAAQ,SAAR,CAAA;WACV,KAAA,CAAM,CAAA,mCAAA,CAAA,CAAsC,KAAtC,CAA4C,OAA5C,CAAA,CAAqD,SAArD,CAAA,CAAN,EAAwE;MAAC,MAAA,EAAQ;IAAT,CAAxE;EADU;;EAGZ,YAAA,GAAe,QAAA,CAAC,KAAD,EAAQ,MAAM,QAAd,EAAwB,OAAO,IAA/B,CAAA;IACb,IAAI,GAAA,KAAO,QAAX;MAA0B,GAAA,GAAM,CAAA,kCAAA,CAAA,CAAqC,KAArC,CAA2C,OAA3C,EAAhC;KAAA,MAAyF,IAAI,GAAA,KAAO,OAAX;MAA0B,GAAA,GAAM,CAAA,oDAAA,CAAA,CAAuD,KAAvD,CAA6D,MAA7D,CAAA,CAAqE,IAArE,CAAA,EAAhC;KAAA,MAAA;AAAiH,aAAO,CAAC,EAAzH;;WACzF,KAAA,CAAM,GAAN,EAAW;MAAC,IAAA,EAAM;IAAP,CAAX,CACE,CAAC,IADH,CACQ,QAAA,CAAC,QAAD,CAAA;MACJ,OAAO,CAAC,GAAR,CAAY,QAAZ;aACA,QAAQ,CAAC,IAAT,CAAA;IAFI,CADR,CAKE,CAAC,KALH,CAKS,QAAA,CAAC,KAAD,CAAA;MACL,OAAO,CAAC,GAAR,CAAY,gBAAZ,EAA8B,KAA9B;AACA,aAAO,CAAC;IAFH,CALT;EAFa;;EAYf,SAAA,GAAY,MAAA,QAAA,CAAC,KAAD,EAAQ,QAAR,EAAkB,KAAlB,EAAyB,MAAI,QAA7B,EAAuC,OAAK,IAA5C,CAAA;AACV,QAAA;IAAA,KAAK,CAAC,OAAN,GAAgB;IAChB,QAAQ,CAAC,MAAT,CAAgB,KAAK,CAAC,SAAtB;IACA,SAAA,GAAY,CAAA,MAAM,YAAA,CAAa,KAAb,EAAoB,GAApB,EAAyB,IAAzB,CAAN;IACZ,IAAG,SAAA,KAAa,CAAC,CAAjB;AAAyB,aAAO,CAAC,EAAjC;KAAA,MAAA;MACE,OAAO,CAAC,GAAR,CAAY,SAAZ;MACA,KAAK,CAAC,SAAN,GAAkB,IAAI,CAAC,KAAL,CAAW,SAAX;MAClB,YAAA,CAAa,KAAb,EAAoB,KAAK,CAAC,SAA1B;aACA,KAAK,CAAC,MAAN,CAAa,QAAA,CAAA,CAAA;eACX,KAAK,CAAC,OAAN,GAAgB;MADL,CAAb,EAJF;;EAJU;;EAaZ,iBAAA,GAAoB,MAAA,QAAA,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAK,EAApB,CAAA;AAClB,QAAA;IAAA,KAAK,CAAC,OAAN,GAAgB;IAChB,SAAA,GAAY,CAAA,MAAM,YAAA,CAAa,KAAb,EAAoB,OAApB,EAA6B,IAA7B,CAAN;IACZ,IAAG,SAAA,KAAa,CAAC,CAAjB;AAAyB,aAAO,CAAC,EAAjC;KAAA,MAAA;MACE,KAAK,CAAC,SAAN,GAAkB,MAAM,CAAC,MAAP,CAAc,KAAK,CAAC,SAApB,EAA+B,IAAI,CAAC,KAAL,CAAW,SAAX,CAA/B;MAClB,OAAO,CAAC,GAAR,CAAY,SAAZ;MACA,YAAA,CAAa,KAAb,EAAoB,KAAK,CAAC,SAA1B;aACA,KAAK,CAAC,MAAN,CAAa,QAAA,CAAA,CAAA;eACX,KAAK,CAAC,OAAN,GAAgB;MADL,CAAb,EAJF;;EAHkB;;EAWpB,aAAA,GAAgB,QAAA,CAAC,IAAD,CAAA;AACd,WAAO,IAAI,CAAC,WAAL,CAAA,CAAA,GAAqB,GAArB,GAA2B,eAAA,CAAgB,IAAI,CAAC,QAAL,CAAA,CAAA,GAAkB,CAAlC,CAA3B,GAAkE,GAAlE,GAAwE,eAAA,CAAgB,IAAI,CAAC,OAAL,CAAA,CAAhB,CAAxE,GAA0G,GAA1G,GAAgH,eAAA,CAAgB,IAAI,CAAC,QAAL,CAAA,CAAhB,CAAhH,GAAmJ,GAAnJ,GAAyJ,eAAA,CAAgB,IAAI,CAAC,UAAL,CAAA,CAAhB,CAAzJ,GAA8L,GAA9L,GAAoM,eAAA,CAAgB,IAAI,CAAC,UAAL,CAAA,CAAhB;EAD7L;;EAGhB,eAAA,GAAkB,QAAA,CAAC,UAAD,CAAA;IAChB,IAAI,UAAA,GAAa,EAAjB;AAA0B,aAAO,GAAA,GAAM,WAAvC;KAAA,MAAA;AAAuD,aAAO,WAA9D;;EADgB;;EAGlB,QAAA,GAAW,QAAA,CAAC,KAAD,EAAQ,KAAR,EAAe,SAAf,EAA0B,KAA1B,EAAiC,KAAjC,EAAwC,IAAxC,CAAA;AACT,QAAA,MAAA,EAAA,QAAA,EAAA;IAAA,MAAA,GAAS;MACP,CAAA,EAAG,KADI;MAEP,CAAA,EAAG,KAFI;MAGP,IAAA,EAAM,MAHC;MAIP,IAAA,EAAM;IAJC;IAMT,MAAA,GAAS;MACP,KAAA,EAAO,CAAA,CADA;MAGP,KAAA,EAAO;QACL,KAAA,EAAO;UACL,IAAA,EAAM,KADD;UAEL,IAAA,EAAM;YACJ,MAAA,EAAQ,wBADJ;YAEJ,IAAA,EAAM,EAFF;YAGJ,KAAA,EAAO;UAHH;QAFD;MADF,CAHA;MAaP,KAAA,EAAO;QACL,KAAA,EAAO;UACL,IAAA,EAAM,KADD;UAEL,IAAA,EAAM;YACJ,MAAA,EAAQ,wBADJ;YAEJ,IAAA,EAAM,EAFF;YAGJ,KAAA,EAAO;UAHH;QAFD;MADF;IAbA;IAwBT,QAAA,GAAW,CAAC,MAAD;WACX,MAAM,CAAC,OAAP,CAAe,IAAf,EAAqB,QAArB,EAA+B,MAA/B;EAhCS;;EAkCX,eAAA,GAAkB,QAAA,CAAC,KAAD,EAAQ,KAAR,EAAe,QAAf,EAAyB,IAAzB,EAA+B,IAA/B,CAAA;AAChB,QAAA,IAAA,EAAA,MAAA,EAAA;IAAA,MAAA,GAAS;MACP,CAAA,EAAG,KADI;MAEP,CAAA,EAAG,KAFI;MAGP,IAAA,EAAM,QAHC;MAIP,IAAA,EAAM,cAJC;MAKP,YAAA,EAAc,QALP;MAMP,MAAA,EAAQ;QACN,IAAA,EAAM;MADA;IAND;IAUT,IAAA,GAAO,CAAC,MAAD;IACP,MAAA,GAAS;MACP,QAAA,EAAU,CAAC,SAAD,EAAY,qBAAZ,CADH;MAEP,UAAA,EAAY,KAFL;MAGP,IAAA,EAAM;QACJ,MAAA,EAAQ,wBADJ;QAEJ,IAAA,EAAM,EAFF;QAGJ,KAAA,EAAO;MAHH,CAHC;MAQP,KAAA,EAAO;QACL,SAAA,EAAW,IADN;QAEL,QAAA,EAAU,KAFL;QAGL,QAAA,EAAU,KAHL;QAIL,QAAA,EAAU,KAJL;QAKL,QAAA,EAAU,KALL;QAML,KAAA,EAAO,EANF;QAOL,cAAA,EAAgB;MAPX,CARA;MAiBP,KAAA,EAAO;QACL,SAAA,EAAW,IADN;QAEL,QAAA,EAAU,KAFL;QAGL,QAAA,EAAU,IAHL;QAIL,QAAA,EAAU,IAJL;QAKL,QAAA,EAAU,IALL;QAML,KAAA,EAAO,EANF;QAOL,cAAA,EAAgB;MAPX;IAjBA;WA2BT,MAAM,CAAC,OAAP,CAAe,IAAf,EAAqB,IAArB,EAA2B,MAA3B;EAvCgB;;EA0ClB,YAAA,GAAe,QAAA,CAAC,KAAD,EAAQ,IAAR,CAAA;AAEb,QAAA,KAAA,EAAA,WAAA,EAAA,QAAA,EAAA,cAAA,EAAA,IAAA,EAAA,KAAA,EAAA,SAAA,EAAA,OAAA,EAAA,WAAA,EAAA,QAAA,EAAA,UAAA,EAAA,KAAA,EAAA,QAAA,EAAA,QAAA,EAAA,UAAA,EAAA,KAAA,EAAA,QAAA;;IAAA,SAAA,GAAY,IAAI,CAAC,MAAM,CAAC;IACxB,IAAG,SAAA,KAAe,SAAlB;MACE,KAAA,GAAQ;MACR,KAAA,GAAQ;MACR,MAAM,CAAC,IAAP,CAAY,SAAZ,CAAsB,CAAC,OAAvB,CAA+B,QAAA,CAAC,GAAD,CAAA;AAC7B,YAAA;QAAA,KAAA,GAAQ,IAAI,IAAJ,CAAS,UAAA,CAAW,GAAX,CAAT;QACR,KAAK,CAAC,IAAN,CAAW,aAAA,CAAc,KAAd,CAAX;eACA,KAAK,CAAC,IAAN,CAAW,SAAU,CAAA,GAAA,CAArB;MAH6B,CAA/B;MAKA,QAAA,CAAS,KAAT,EAAgB,KAAhB,EAAuB,eAAvB,EAAwC,OAAxC,EAAiD,kBAAjD,EAAqE,MAArE,EARF;KADA;;IAYA,WAAA,GAAc,IAAI,CAAC,MAAM,CAAC;IAC1B,IAAG,WAAA,KAAiB,SAApB;MACE,KAAA,GAAQ;MACR,QAAA,GAAW;MACX,QAAA,GAAW;MACX,QAAA,GAAW;MACX,IAAA,GAAO;MACP,MAAM,CAAC,IAAP,CAAY,WAAZ,CAAwB,CAAC,OAAzB,CAAiC,QAAA,CAAC,GAAD,CAAA;QAC/B,QAAQ,CAAC,IAAT,CAAc,KAAA,EAAd;QACA,QAAQ,CAAC,IAAT,CAAc,WAAY,CAAA,GAAA,CAAK,CAAA,CAAA,CAA/B;QACA,IAAI,CAAC,IAAL,CAAU,WAAY,CAAA,GAAA,CAAK,CAAA,CAAA,CAAjB,GAAsB,CAAhC;eACA,QAAQ,CAAC,IAAT,CAAc,WAAY,CAAA,GAAA,CAAK,CAAA,CAAA,CAA/B;MAJ+B,CAAjC;MAMA,eAAA,CAAgB,QAAhB,EAA0B,QAA1B,EAAoC,QAApC,EAA8C,IAA9C,EAAoD,SAApD,EAZF;KAbA;;IA4BA,WAAA,GAAc,IAAI,CAAC,MAAM,CAAC;IAC1B,IAAG,WAAA,KAAiB,SAApB;MACE,KAAA,GAAQ;MACR,QAAA,GAAW;MACX,QAAA,GAAW;MACX,OAAA,GAAU;MACV,KAAA,GAAQ;MACR,MAAM,CAAC,IAAP,CAAY,WAAZ,CAAwB,CAAC,OAAzB,CAAiC,QAAA,CAAC,GAAD,CAAA;QAC/B,QAAQ,CAAC,IAAT,CAAc,KAAA,EAAd;QACA,QAAQ,CAAC,IAAT,CAAc,WAAY,CAAA,GAAA,CAAK,CAAA,CAAA,CAA/B;QACA,KAAK,CAAC,IAAN,CAAW,WAAY,CAAA,GAAA,CAAK,CAAA,CAAA,CAAjB,GAAsB,CAAjC;eACA,OAAO,CAAC,IAAR,CAAa,WAAY,CAAA,GAAA,CAAK,CAAA,CAAA,CAA9B;MAJ+B,CAAjC;MAMA,eAAA,CAAgB,QAAhB,EAA0B,QAA1B,EAAoC,OAApC,EAA6C,KAA7C,EAAoD,SAApD,EAZF;KA7BA;;IA4CA,cAAA,GAAiB,IAAI,CAAC,MAAM,CAAC;IAC7B,IAAG,cAAA,KAAoB,SAAvB;MACE,UAAA,GAAa;MACb,UAAA,GAAa;MACb,cAAc,CAAC,OAAf,CAAuB,QAAA,CAAC,OAAD,CAAA;QACrB,UAAU,CAAC,IAAX,CAAgB,OAAO,CAAC,IAAxB;eACA,UAAU,CAAC,IAAX,CAAgB,OAAO,CAAC,SAAxB;MAFqB,CAAvB;MAIA,QAAA,CAAS,UAAT,EAAqB,UAArB,EAAiC,oBAAjC,EAAuD,OAAvD,EAAgE,WAAhE,EAA6E,WAA7E,EAPF;;WASA,KAAK,CAAC,MAAN,CAAa,QAAA,CAAA,CAAA;MACX,KAAK,CAAC,QAAN,GAAkB,SAAA,KAAe;MACjC,KAAK,CAAC,WAAN,GAAqB,WAAA,KAAiB;MACtC,KAAK,CAAC,WAAN,GAAqB,WAAA,KAAiB;aACtC,KAAK,CAAC,aAAN,GAAuB,cAAA,KAAoB;IAJhC,CAAb;EAxDa;AA5Kf",
  "sourcesContent": [
    "#'use strict'\r\n\r\nangular.module('myApp.homeView', ['ngRoute'])\r\n  .config(['$routeProvider', ($routeProvider) ->\r\n    $routeProvider.when '/', {\r\n      templateUrl: 'homeView/homeView.html',\r\n      controller: 'View1Ctrl'\r\n    }\r\n])\r\n  .controller('View1Ctrl', [\"$scope\", \"$interval\", (scope, interval) ->\r\n    scope.topics = [\"Trump\", \"Klimawandel\", \"FakeNews\"]\r\n    scope.topic = scope.topics[0]\r\n    scope.showTerm = true\r\n    scope.showCounted = true\r\n    scope.showTopUser = true\r\n    scope.showSentiment = true\r\n    scope.loading = true\r\n    scope.selectTopic = (topic) ->\r\n      scope.topic = topic\r\n      newGraphs(scope, interval, scope.topic)\r\n    #\r\n    scope.userEmail = \"\"\r\n    scope.sendEmail = () ->\r\n      sendEmail(scope.topic, scope.userEmail)\r\n    #\r\n    scope.topicQuery = \"\"\r\n    scope.queryTopic = () ->\r\n      scope.topic = scope.topicQuery\r\n      queryTopic(scope, interval, scope.topicQuery)\r\n    #\r\n    newGraphs(scope, interval, scope.topic)\r\n])\r\n  .directive('loadingGif', () ->\r\n    {\r\n      restrict: \"E\"\r\n      scope: {\r\n        show:\"=\"\r\n      }\r\n      templateUrl: \"../loadingGifTemplate.html\"\r\n    }\r\n)\r\n\r\nqueryTopic = (scope, interval, topic) ->\r\n  status = await newGraphs(scope, interval, topic, \"query\")\r\n  interval.cancel(scope.timeoutId)\r\n  if status isnt -1\r\n    scope.timeoutId = interval((()->\r\n      console.log \"updating graphs\"\r\n      updateQueryGraphs(scope, topic)\r\n    ),1000)\r\n\r\nsendEmail = (topic, userEmail) ->\r\n  fetch(\"http://localhost:8080/email?search=#{topic}&email=#{userEmail}\", {method: \"POST\"})\r\n\r\nreqGraphData = (topic, url = \"static\", size = 1000)->\r\n  if (url == \"static\") then url = \"http://localhost:8080/test?search=#{topic}&type=1\" else if (url == \"query\") then  url = \"https://giant-firefox-64.localtunnel.me/test?search=#{topic}&size=#{size}\" else return -1\r\n  fetch(url, {mode: 'cors'})\r\n    .then((response) ->\r\n      console.log(response)\r\n      response.text()\r\n  )\r\n    .catch((error) ->\r\n      console.log('Request failed', error)\r\n      return -1\r\n  )\r\n  \r\nnewGraphs = (scope, interval, topic, url=\"static\", size=1000) ->\r\n  scope.loading = true\r\n  interval.cancel(scope.timeoutId)\r\n  graphData = await reqGraphData(topic, url, size)\r\n  if(graphData == -1) then return -1 else\r\n    console.log(graphData)\r\n    scope.graphData = JSON.parse(graphData)\r\n    separateData(scope, scope.graphData)\r\n    scope.$apply(()->\r\n      scope.loading = false\r\n    )\r\n\r\n\r\nupdateQueryGraphs = (scope, topic, size=10) ->\r\n  scope.loading = true\r\n  graphData = await reqGraphData(topic, \"query\", size)\r\n  if(graphData == -1) then return -1 else\r\n    scope.graphData = Object.assign(scope.graphData, JSON.parse(graphData))\r\n    console.log(graphData)\r\n    separateData(scope, scope.graphData)\r\n    scope.$apply(()->\r\n      scope.loading = false\r\n    )\r\n\r\ngetDateFormat = (date) ->\r\n  return date.getFullYear() + \"-\" + checkDateLength(date.getMonth() + 1) + \"-\" + checkDateLength(date.getDate()) + \" \" + checkDateLength(date.getHours()) + \":\" + checkDateLength(date.getMinutes()) + \":\" + checkDateLength(date.getSeconds())\r\n\r\ncheckDateLength = (dateLength) ->\r\n  if (dateLength < 10) then return \"0\" + dateLength else return dateLength\r\n\r\nplotTerm = (xData, yData, graphName, xName, yName, type) ->\r\n  trace1 = {\r\n    x: xData,\r\n    y: yData,\r\n    type: 'line',\r\n    name: graphName\r\n  }\r\n  layout = {\r\n    title: {\r\n    },\r\n    xaxis: {\r\n      title: {\r\n        text: xName,\r\n        font: {\r\n          family: 'Courier New, monospace',\r\n          size: 18,\r\n          color: '#7f7f7f'\r\n        }\r\n      },\r\n    },\r\n    yaxis: {\r\n      title: {\r\n        text: yName,\r\n        font: {\r\n          family: 'Courier New, monospace',\r\n          size: 18,\r\n          color: '#7f7f7f'\r\n        }\r\n      }\r\n    }\r\n  }\r\n  termData = [trace1]\r\n  Plotly.newPlot(type, termData, layout)\r\n\r\nplotBubbleChart = (xData, yData, hashtags, size, type) ->\r\n  trace1 = {\r\n    x: xData,\r\n    y: yData,\r\n    text: hashtags,\r\n    mode: 'markers+text',\r\n    textposition: 'center',\r\n    marker: {\r\n      size: size,\r\n    }\r\n  }\r\n  data = [trace1]\r\n  layout = {\r\n    colorway: ['#0497f3', 'rgba(34,28,28,0.82)'],\r\n    showlegend: false,\r\n    font: {\r\n      family: 'Courier New, monospace',\r\n      size: 15,\r\n      color: '#222222'\r\n    },\r\n    xaxis: {\r\n      autorange: true,\r\n      showgrid: false,\r\n      zeroline: false,\r\n      showline: false,\r\n      autotick: false,\r\n      ticks: '',\r\n      showticklabels: false\r\n    },\r\n    yaxis: {\r\n      autorange: true,\r\n      showgrid: false,\r\n      zeroline: true,\r\n      showline: true,\r\n      autotick: true,\r\n      ticks: '',\r\n      showticklabels: true\r\n    }\r\n  }\r\n  Plotly.newPlot(type, data, layout)\r\n\r\n\r\nseparateData = (scope, data) ->\r\n  # terms Data\r\n  termsData = data.result.term\r\n  if termsData isnt \"no_data\"\r\n    xTerm = []\r\n    yTerm = []\r\n    Object.keys(termsData).forEach((key) ->\r\n      xDate = new Date(parseFloat(key))\r\n      xTerm.push(getDateFormat(xDate))\r\n      yTerm.push(termsData[key])\r\n    )\r\n    plotTerm(xTerm, yTerm, 'Tweets Loaded', 'Dates', 'Number of Tweets', 'term')\r\n\r\n  # counted Data\r\n  countedData = data.result.counted\r\n  if countedData isnt \"no_data\"\r\n    count = 1\r\n    xCounted = []\r\n    yCounted = []\r\n    hashtags = []\r\n    size = []\r\n    Object.keys(countedData).forEach((key) ->\r\n      xCounted.push(count++)\r\n      yCounted.push(countedData[key][1])\r\n      size.push(countedData[key][1] * 4)\r\n      hashtags.push(countedData[key][0])\r\n    )\r\n    plotBubbleChart(xCounted, yCounted, hashtags, size, \"counted\")\r\n\r\n  # topUser Data\r\n  topUserData = data.result.topuser\r\n  if topUserData isnt \"no_data\"\r\n    count = 1\r\n    xTopUser = []\r\n    yTopUser = []\r\n    topUser = []\r\n    size2 = []\r\n    Object.keys(topUserData).forEach((key) ->\r\n      xTopUser.push(count++)\r\n      yTopUser.push(topUserData[key][1])\r\n      size2.push(topUserData[key][1] * 4)\r\n      topUser.push(topUserData[key][0])\r\n    )\r\n    plotBubbleChart(xTopUser, yTopUser, topUser, size2, \"topuser\")\r\n\r\n  # Sentiment Data\r\n  sentimentsData = data.result.sentiment\r\n  if sentimentsData isnt \"no_data\"\r\n    xSentiment = []\r\n    ySentiment = []\r\n    sentimentsData.forEach((element) ->\r\n      xSentiment.push(element.Time)\r\n      ySentiment.push(element.Sentiment)\r\n    )\r\n    plotTerm(xSentiment, ySentiment, \"Sentiment Analisis\", \"Dates\", \"Sentiment\", \"sentiment\")\r\n\r\n  scope.$apply(() ->\r\n    scope.showTerm = (termsData isnt \"no_data\")\r\n    scope.showCounted = (countedData isnt \"no_data\")\r\n    scope.showTopUser = (topUserData isnt \"no_data\")\r\n    scope.showSentiment = (sentimentsData isnt \"no_data\")\r\n  )\r\n\r\n"
  ]
}